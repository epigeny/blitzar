import{_ as n}from"./preload-helper.8b70a8dd.js";import{_ as i,r as p,c as l,a as t,b as o,d as a,e,o as c}from"./app.90a06da7.js";const Y='{"title":"BlitzTable","description":"","frontmatter":{"editLink":true},"headers":[{"level":2,"title":"Basics","slug":"basics"},{"level":3,"title":"Basic Example","slug":"basic-example"},{"level":3,"title":"Advanced Example","slug":"advanced-example"},{"level":3,"title":"Using Custom Components","slug":"using-custom-components"},{"level":2,"title":"Column Features","slug":"column-features"},{"level":3,"title":"Nested Data","slug":"nested-data"},{"level":3,"title":"Mutating Columns","slug":"mutating-columns"},{"level":3,"title":"Combining Columns","slug":"combining-columns"},{"level":3,"title":"Grid View","slug":"grid-view"},{"level":2,"title":"Editing","slug":"editing"},{"level":3,"title":"Edit Inline","slug":"edit-inline"},{"level":3,"title":"Edit on Cell Double-Click","slug":"edit-on-cell-double-click"},{"level":3,"title":"Edit Modal on Row Click","slug":"edit-modal-on-row-click"},{"level":3,"title":"Edit Modal on Button Click","slug":"edit-modal-on-button-click"},{"level":3,"title":"Adding a New Row","slug":"adding-a-new-row"},{"level":2,"title":"Selection","slug":"selection"},{"level":3,"title":"Select by Checkbox","slug":"select-by-checkbox"},{"level":2,"title":"Styling","slug":"styling"}],"relativePath":"blitz-table/index.md","lastUpdated":1654760712122}',r={},u=o('<h1 id="blitztable" tabindex="-1">BlitzTable <a class="header-anchor" href="#blitztable" aria-hidden="true">#</a></h1><h2 id="basics" tabindex="-1">Basics <a class="header-anchor" href="#basics" aria-hidden="true">#</a></h2><p><code>&lt;BlitzTable /&gt;</code> is a <em><strong>data table</strong></em> component you can use with the same <code>schema</code> syntax of <a href="/blitz-form/">BlitzForms</a> to define your columns.</p><p>With a single &quot;schema&quot; you can generate:</p><ul><li>the columns of the table</li><li>the fields of the cards in grid-view</li><li>an editable form in a dialog when clicking on a row</li></ul><h3 id="basic-example" tabindex="-1">Basic Example <a class="header-anchor" href="#basic-example" aria-hidden="true">#</a></h3><p>Here we see a basic example for a BlitzTable. Check out the <em>template</em> and <em>script</em> tabs below to see how easy it is to render a data table based on the schema.</p><p>By default</p><ul><li>the table shows ALL the rows without pagination</li><li>all the rows are sortable</li></ul>',9),d=o('<h3 id="advanced-example" tabindex="-1">Advanced Example <a class="header-anchor" href="#advanced-example" aria-hidden="true">#</a></h3><p>This is a more advanced example that includes...</p><ul><li>a title</li><li>a search input field</li><li>a grid/table view toggle</li><li>pagination features</li><li>an image rendered with <code>&lt;img /&gt;</code></li><li>dates are shown with <code>toLocaleDateString()</code></li><li>numbers are shown with <code>toLocaleString()</code></li></ul>',3),m=a("h3",{id:"using-custom-components",tabindex:"-1"},[e("Using Custom Components "),a("a",{class:"header-anchor",href:"#using-custom-components","aria-hidden":"true"},"#")],-1),_=a("p",null,"Here you see the example uses all HTML5 components to render all the fields surrounding the table.",-1),h=a("p",null,"The idea, as always with Blitzar, is that you BYOC (Bring Your Own Components).",-1),k=o(`<h2 id="column-features" tabindex="-1">Column Features <a class="header-anchor" href="#column-features" aria-hidden="true">#</a></h2><p>Because every column is based on a BlitzForm field, there is quite some flexibility what you can do with a column. Below are some examples of this.</p><h3 id="nested-data" tabindex="-1">Nested Data <a class="header-anchor" href="#nested-data" aria-hidden="true">#</a></h3><p>Columns support &quot;dot-notation&quot; to access nested data in your rows array.</p><div class="language-js"><pre><code><span class="token keyword">const</span> rows <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token punctuation">{</span> first<span class="token operator">:</span> <span class="token string">&#39;Luca&#39;</span><span class="token punctuation">,</span> last<span class="token operator">:</span> <span class="token string">&#39;Ban&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>
<span class="token punctuation">]</span>

<span class="token keyword">const</span> schemaColumns <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token string">&#39;name.first&#39;</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token string">&#39;First Name&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token string">&#39;name.last&#39;</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token string">&#39;Last Name&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre></div><p>Full example:</p>`,6),b=o(`<h3 id="mutating-columns" tabindex="-1">Mutating Columns <a class="header-anchor" href="#mutating-columns" aria-hidden="true">#</a></h3><p>Columns can be &quot;mutated&quot; meaning data can be shown differently from the actual underlying data. To do so define a <code>parseValue</code> function.</p><div class="language-js"><pre><code><span class="token keyword">const</span> schemaColumns <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token string">&#39;Name&#39;</span><span class="token punctuation">,</span> <span class="token function-variable function">parseValue</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> val<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token string">&#39;date&#39;</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token string">&#39;Date&#39;</span><span class="token punctuation">,</span> <span class="token function-variable function">parseValue</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> val<span class="token punctuation">.</span><span class="token function">toLocaleDateString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token string">&#39;number&#39;</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token string">&#39;Balance&#39;</span><span class="token punctuation">,</span> <span class="token function-variable function">parseValue</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> val<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre></div><p>Full example:</p>`,4),g=o('<h3 id="combining-columns" tabindex="-1">Combining Columns <a class="header-anchor" href="#combining-columns" aria-hidden="true">#</a></h3><p>Two table columns can be combined. A combined column is one that shows data based on multiple fields/columns.</p><div class="language-js"><pre><code><span class="token keyword">const</span> schemaColumns <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token comment">// no &#39;id&#39; required for the combined column</span>\n  <span class="token punctuation">{</span> label<span class="token operator">:</span> <span class="token string">&#39;Full Name&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span> <span class="token punctuation">{</span> formData <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>formData<span class="token punctuation">.</span>firstName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>formData<span class="token punctuation">.</span>lastName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span>\n</code></pre></div><p>In this example the <em>Full Name</em> and <em>Initials</em> are calculated on the fly when showing the table. You can even sort and search for data in these combined columns.</p>',4),w=a("h3",{id:"grid-view",tabindex:"-1"},[e("Grid View "),a("a",{class:"header-anchor",href:"#grid-view","aria-hidden":"true"},"#")],-1),f=a("p",null,"You can have a separate view for the table and grid views.",-1),v=o(`<h2 id="editing" tabindex="-1">Editing <a class="header-anchor" href="#editing" aria-hidden="true">#</a></h2><p>There are various ways to implement the ability to edit table data. Below I show case 4 ways to easily implement editing. Each time you can check the <em>template</em> and <em>script</em> tabs to check how it can be implemented.</p><p>Any editing requires every object in your <code>rows</code> array to have an <strong><code>id</code> prop</strong>.</p><h3 id="edit-inline" tabindex="-1">Edit Inline <a class="header-anchor" href="#edit-inline" aria-hidden="true">#</a></h3><p>This example simply toggles the &quot;mode&quot; of the table from &quot;raw&quot; to &quot;edit&quot;. See <a href="/blitz-form/#edit-readonly-disabled-raw-modes">BlitzTable &gt; Modes</a> for more info.</p><p>To be able to show actual form components (like <code>&lt;input /&gt;</code> or custom components) you need to make sure to add them to the <code>schemaColumns</code>.</p><div class="language-html"><pre><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BlitzTable</span> <span class="token attr-name">mode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>edit<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:schemaColumns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>schemaColumns<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
</code></pre></div><div class="language-js"><pre><code><span class="token keyword">const</span> schemaColumns <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span> id<span class="token operator">:</span> <span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> label<span class="token operator">:</span> <span class="token string">&#39;Name&#39;</span><span class="token punctuation">,</span> component<span class="token operator">:</span> <span class="token string">&#39;input&#39;</span> <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre></div><p>Full example:</p>`,9),E=a("h3",{id:"edit-on-cell-double-click",tabindex:"-1"},[e("Edit on Cell Double-Click "),a("a",{class:"header-anchor",href:"#edit-on-cell-double-click","aria-hidden":"true"},"#")],-1),T=a("p",null,[e("Making a Cell editable on double-click is a bit more advanced and requires more setup. You need to make use of Dynamic Props to make it possible. (more info on Dynamic Props at "),a("a",{href:"/advanced/#dynamic-props"},"Advanced > Dynamic Props"),e(")")],-1),C=a("p",null,"Check the source code of the example below to see how it's implemented:",-1),F=a("h3",{id:"edit-modal-on-row-click",tabindex:"-1"},[e("Edit Modal on Row Click "),a("a",{class:"header-anchor",href:"#edit-modal-on-row-click","aria-hidden":"true"},"#")],-1),R=a("p",null,"It's possible to show a modal with a BlitzForm to edit data on row click. See the source code below to see how it's implemented:",-1),y=a("h3",{id:"edit-modal-on-button-click",tabindex:"-1"},[e("Edit Modal on Button Click "),a("a",{class:"header-anchor",href:"#edit-modal-on-button-click","aria-hidden":"true"},"#")],-1),x=a("p",null,"It's possible to show a modal with a BlitzForm to edit data on the click of a button. See the source code below to see how it's implemented:",-1),A=a("h3",{id:"adding-a-new-row",tabindex:"-1"},[e("Adding a New Row "),a("a",{class:"header-anchor",href:"#adding-a-new-row","aria-hidden":"true"},"#")],-1),I=a("p",null,"This is an example of how you could set up a button that shows a BlitzForm to add new data to the table.",-1),D=o(`<h2 id="selection" tabindex="-1">Selection <a class="header-anchor" href="#selection" aria-hidden="true">#</a></h2><h3 id="select-by-checkbox" tabindex="-1">Select by Checkbox <a class="header-anchor" href="#select-by-checkbox" aria-hidden="true">#</a></h3><p>To be able to select rows with some sort of checkbox (please provide your own, or use the HTML5 input with type &#39;checkbox&#39;) you need to set a column ID to a special string imported from Blitzar:</p><p>Please note that every object in your <code>rows</code> array needs an <strong><code>id</code> prop</strong> in order for the selection feature to work.</p><div class="language-js"><pre><code><span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">ROW_SELECTION_ID</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;blitzar&#39;</span>
<span class="token keyword">import</span> <span class="token string">&#39;blitzar/dist/style.css&#39;</span>

<span class="token keyword">const</span> schemaColumns <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">{</span>
    id<span class="token operator">:</span> <span class="token constant">ROW_SELECTION_ID</span><span class="token punctuation">,</span> <span class="token comment">// or you can use the string &#39;BLITZ-TABLE-ROW-SELECTION&#39;</span>
    component<span class="token operator">:</span> <span class="token string">&#39;input&#39;</span><span class="token punctuation">,</span>
    type<span class="token operator">:</span> <span class="token string">&#39;checkbox&#39;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre></div><p>For the actual selection checkbox, you can use any component that works with <code>v-model</code> and accepts a <code>boolean</code> for its <code>modelValue</code>. Please Bring Your Own Components. : )</p>`,6),V=a("p",null,[e("When you search something and then click the "),a("em",null,"select all"),e(" checkbox in the header, it will select all filtered rows based on your search results.")],-1),P=a("h2",{id:"styling",tabindex:"-1"},[e("Styling "),a("a",{class:"header-anchor",href:"#styling","aria-hidden":"true"},"#")],-1),B=a("p",null,"TODO: Styling section will be re-written soon.",-1);function L(S,O,j,N,q,z){const s=p("CodeBlockComponent");return c(),l("div",null,[u,t(s,{importFn:()=>n(()=>import("./Basics - Basic Example.8b59a8f6.js"),["assets/Basics - Basic Example.8b59a8f6.js","assets/app.90a06da7.js"]),importFnRaw:()=>n(()=>import("./Basics - Basic Example.015caa98.js"),[])},null,8,["importFn","importFnRaw"]),d,t(s,{importFn:()=>n(()=>import("./Basics - Advanced Example.7fe180a7.js"),["assets/Basics - Advanced Example.7fe180a7.js","assets/preload-helper.8b70a8dd.js","assets/app.90a06da7.js"]),importFnRaw:()=>n(()=>import("./Basics - Advanced Example.7da359bf.js"),[])},null,8,["importFn","importFnRaw"]),m,_,h,t(s,{importFn:()=>n(()=>import("./Basics - Example HTML5 Components.2ce69afc.js"),["assets/Basics - Example HTML5 Components.2ce69afc.js","assets/preload-helper.8b70a8dd.js","assets/app.90a06da7.js"]),importFnRaw:()=>n(()=>import("./Basics - Example HTML5 Components.94ceb2f7.js"),[])},null,8,["importFn","importFnRaw"]),k,t(s,{importFn:()=>n(()=>import("./Column Features - Nested Data.af941831.js"),["assets/Column Features - Nested Data.af941831.js","assets/preload-helper.8b70a8dd.js","assets/app.90a06da7.js"]),importFnRaw:()=>n(()=>import("./Column Features - Nested Data.a19ca621.js"),[])},null,8,["importFn","importFnRaw"]),b,t(s,{importFn:()=>n(()=>import("./Column Features - Mutating Columns.ab392692.js"),["assets/Column Features - Mutating Columns.ab392692.js","assets/preload-helper.8b70a8dd.js","assets/app.90a06da7.js"]),importFnRaw:()=>n(()=>import("./Column Features - Mutating Columns.ae57cbb4.js"),[])},null,8,["importFn","importFnRaw"]),g,t(s,{importFn:()=>n(()=>import("./Column Features - Combining Columns.80bf8e0a.js"),["assets/Column Features - Combining Columns.80bf8e0a.js","assets/preload-helper.8b70a8dd.js","assets/app.90a06da7.js"]),importFnRaw:()=>n(()=>import("./Column Features - Combining Columns.fa6c9829.js"),[])},null,8,["importFn","importFnRaw"]),w,f,t(s,{importFn:()=>n(()=>import("./Column Features - Grid View.d8e26c83.js"),["assets/Column Features - Grid View.d8e26c83.js","assets/app.90a06da7.js"]),importFnRaw:()=>n(()=>import("./Column Features - Grid View.10995c8b.js"),[])},null,8,["importFn","importFnRaw"]),v,t(s,{importFn:()=>n(()=>import("./Editing - Inline.cfbbe830.js"),["assets/Editing - Inline.cfbbe830.js","assets/app.90a06da7.js"]),importFnRaw:()=>n(()=>import("./Editing - Inline.1dfce097.js"),[])},null,8,["importFn","importFnRaw"]),E,T,C,t(s,{importFn:()=>n(()=>import("./Editing - On Cell Double-Click.c2f9bf97.js"),["assets/Editing - On Cell Double-Click.c2f9bf97.js","assets/app.90a06da7.js"]),importFnRaw:()=>n(()=>import("./Editing - On Cell Double-Click.09f968fa.js"),[])},null,8,["importFn","importFnRaw"]),F,R,t(s,{importFn:()=>n(()=>import("./Editing - Modal on Row Click.f7226d81.js"),["assets/Editing - Modal on Row Click.f7226d81.js","assets/VueFinalModal.esm.30e6e2d5.js","assets/app.90a06da7.js"]),importFnRaw:()=>n(()=>import("./Editing - Modal on Row Click.87457a75.js"),[])},null,8,["importFn","importFnRaw"]),y,x,t(s,{importFn:()=>n(()=>import("./Editing - Modal on Button Click.05a836a6.js"),["assets/Editing - Modal on Button Click.05a836a6.js","assets/VueFinalModal.esm.30e6e2d5.js","assets/app.90a06da7.js"]),importFnRaw:()=>n(()=>import("./Editing - Modal on Button Click.4b495caa.js"),[])},null,8,["importFn","importFnRaw"]),A,I,t(s,{importFn:()=>n(()=>import("./Editing - Adding a New Row.738726d3.js"),["assets/Editing - Adding a New Row.738726d3.js","assets/VueFinalModal.esm.30e6e2d5.js","assets/app.90a06da7.js"]),importFnRaw:()=>n(()=>import("./Editing - Adding a New Row.22c30f31.js"),[])},null,8,["importFn","importFnRaw"]),D,t(s,{importFn:()=>n(()=>import("./Selection.c2d7fe47.js"),["assets/Selection.c2d7fe47.js","assets/preload-helper.8b70a8dd.js","assets/app.90a06da7.js"]),importFnRaw:()=>n(()=>import("./Selection.b364b857.js"),[])},null,8,["importFn","importFnRaw"]),V,P,B])}var $=i(r,[["render",L]]);export{Y as __pageData,$ as default};
